# Field:       name 
# Description: name of the test, should be unique (duplicate name within same package+framework will lead to problems)

# Field:       type
# Description: type of the algorithm
# Supported values:
#  - classification
#  - clustering+regression planned

# Field:       framework
# Description: Machine learning framework that where the current algorithm is defined
# Supported values:
#  - weka
#  - spark
#  - sklearn

# Field:       package
# Description: package in which the algorithm is implemented

# Field:       class
# Description: name of the class that implements the algorithm

# Field:       features
# Description: defines which features can be used for the training with this algorithm, can be a list if multiple feature types are supported
# Supported values:
#  - DOUBLE          all double values (Java)
#  - FLOAT           all float values (Java)
#  - POSITIVEDOUBLE  positive double values (Java)
#  - POSITIVEFLOAT   positive float values (Java)
#  - UNIT            floating point numbers in [0,1]
#  - CATEGORICAL      categorical data

# Field:       properties
# Description: Defines which properties the algorithm should fulfill. 
# supported properties:
#  - same      re-train with the same data --> expect classes/scores to be the same
#  - scramble  re-train with randomly reordered instances --> expect classes/scores to be the same
#  - reorder   re-train with randomly reordered features --> expect classes/scores to be the same
#  - const     re-train with +1 added to all numeric features --> expect classes/scores to be the same
#  - opposite  re-train with all class labels flipped --> expect classes to be the same, scores inverted (1-priorScore)
# supported evaluations:
#  - score_exac  scores must be exactly the same after re-training
#  - class_exac  classifications must be exactly the same after re-training
#  - class_stat  classifications must not be significantly different from expectation after re-training (chi-squared test)
#  - score_stat  scores of distributionForInstance must not be significantly different from expectation after re-training (KS test)

# Field:       parameters
# Description: List of relevant hyper parameters of the algorithm.
#               Every parameter must specify a default value; the default value can be different from the default in the application
# Supported parameter types:
#  - double     double values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - integer    integer values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - flag       flag that is either enabled or disabled; both will be tested with the default values of the other parameters
#  - fixedflag  a flag that is always used with the default value - probably only makes sense with the value enabled.
#  - values     list of values that will be tested with the default values of the other parameters

####################
# Weka Classifiers #
#################### 

# Tree classifiers from the package weka.classifiers.trees

name: WEKA_C45_UNPRUNED
type: classification
framework: weka
package: weka.classifiers.trees
class: J48
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_stat
  reorder: class_exact
  const: class_stat
  opposite: score_stat
parameters:
  U: # unpruned
    type: fixedflag
    default: enabled
  M: # min number of objects
    type: integer
    min: 1
    max: 10
    stepsize: 1
    default: 2
  O: # collapse tree if training error is not reduced
    type: flag
    default: disabled
  doNotMakeSplitPointActualValue:
    type: flag
    default: disabled
  A: # use laplace correction
    type: flag
    default: disabled
  J: # use MDL correction
  # not compatible with doNotMakeSplitPointActualValue, but not both used in combination currently
    type: flag
    default: disabled
---

name: WEKA_C45_PRUNED
type: classification
framework: weka
package: weka.classifiers.trees
class: J48
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  C: # confidence factor
    type: double
    min: 0.05
    max: 0.95
    stepsize: 0.05
    default: 0.25
  M: # min number of objects
    type: integer
    min: 1
    max: 10
    stepsize: 1
    default: 2
  O: # collapse tree if training error is not reduced
    type: flag
    default: disabled
  doNotMakeSplitPointActualValue:
    type: flag
    default: disabled
  S: # subtree raising when pruning
    type: flag
    default: disabled
  A: # use laplace correction
    type: flag
    default: disabled
  J: # use MDL correction
  # not compatible with doNotMakeSplitPointActualValue, but not both used in combination currently
    type: flag
    default: disabled    
---

name: WEKA_C45_REP
type: classification
framework: weka
package: weka.classifiers.trees
class: J48
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  R: # unpruned
    type: fixedflag
    default: enabled
  N: # number of folds for REP
    type: integer
    min: 2
    max: 10
    stepsize: 1
    default: 3
  M: # min number of objects
    type: integer
    min: 1
    max: 10
    stepsize: 1
    default: 2
  O: # collapse tree if training error is not reduced
    type: flag
    default: disabled
  doNotMakeSplitPointActualValue:
    type: flag
    default: disabled
  A: # use laplace correction
    type: flag
    default: disabled
  J: # use MDL correction
  # not compatible with doNotMakeSplitPointActualValue, but not both used in combination currently
    type: flag
    default: disabled
---

name: WEKA_DECISIONSTUMP
type: classification
framework: weka
package: weka.classifiers.trees
class: DecisionStump
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
---

name: WEKA_HOEFFDING
type: classification
framework: weka
package: weka.classifiers.trees
class: HoeffdingTree
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  G: # grace period, i.e., weight of instances of inputs observed before splitting (default weight of an instance is 1.0)
    type: double
    min: 50
    max: 250
    stepsize: 50
  H: # hoeffding tie threshold
    type: values # actually double, but we get better test cases with values
    values: [0.001, 0.05, 0.1]
    default: 0.05
  L: # leaf prediction strategy (0 = majority class; 1 = naive bayes; 2 = naive bayes adaptive)
    type: values
    values: [0, 1, 2]
    default: 2
  M: # minimum fraction of information gain required for a split
    type: double
    min: 0.005
    max: 0.02
    stepsize: 0.005
    default: 0.01
  N: # naive bayes prediction threshold
    type: double
    min: 0.005
    max: 0.02
    stepsize: 0.005
    default: 0.01
  E: # allowable error in split confidence
    type: values # actually double, but we get better test cases with values
    values: [1.0E-7, 1.0E-5, 1.0E-3]
    default: 1.0E-7
---

name: WEKA_LMT
type: classification
framework: weka
package: weka.classifiers.trees
class: LMT
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  B: # convert nominal to binary attributes
    type: flag
    default: disabled
  doNotMakeSplitPointActualValue:
    type: flag
    default: disabled
  P: # minimize on probablities instead of misclassification error
    type: flag
    default: disabled
  C: # use fast regression instead of cross validation
    type: flag
    default: enabled
  M: # minimal number of instance in a node to consider splitting
    type: integer
    min: 1
    max: 29
    stepsize: 14
    default: 15
  I: # fixed number of logit-boost iteration, cross validation is used to determine this in case of -1
    type: integer
    min: -1
    max: 9
    stepsize: 2
    default: -1
  R: # split on residuals of logistic regression
    type: flag
    default: disabled
  A: # use AIC to determine number of boosting iterations
    type: flag
    default: disabled
  W: # sets the weight of the beta for test generation
    type: double
    min: 0.0
    max: 1.0
    stepsize: 0.2
    default: 0.0
---

name: WEKA_RANDOMFOREST
type: classification
framework: weka
package: weka.classifiers.trees
class: RandomForest
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  B: # break ties randomly
    type: flag
    default: disabled
  O: # calculate out of bag error
    type: flag
    default: disabled
  attribute-importance: # calculate attribute importance
    type: flag
    default: disabled
  depth: # depth of the trees
    type: integer
    min: 0
    max: 4
    stepsize: 1
    default: 0
  num-slots: # number of threads used
    type: integer
    min: 1
    max: 2
    stepsize: 1
    default: 1
  I: # number of random trees
    type: integer
    min: 10
    max: 540
    stepsize: 90
    default: 100 
  M: # minimal sum of weight of all instances in a leaf (default weight per instance is 1.0)
    # this parameters is not visible in the Weka GUI - Possible BUG
    type: double
    min: 1.0
    max: 9.0
    stepsize: 2.0
    default: 1.0
  V: # minimal variance that must be covered for a split
    # this parameters is not visible in the Weka GUI - Possible BUG
    type: double
    min: 0.001
    max: 0.101
    stepsize: 0.05
    default: 0.001
  N: # number of folds that are used for backfitting
    # this parameters is not visible in the Weka GUI - Possible BUG
    type: integer
    min: 0
    max: 3
    stepsize: 1
    default: 0 
# check numFeatures, this is kinda difficult here
---

name: WEKA_RANDOMTREE
type: classification
framework: weka
package: weka.classifiers.trees
class: RandomTree
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  B: # break ties randomly
    type: flag
    default: disabled
  depth: # depth of the trees
    type: integer
    min: 0
    max: 4
    stepsize: 1
    default: 0
  M: # minimal sum of weight of all instances in a leaf (default weight per instance is 1.0)
    type: double
    min: 1.0
    max: 9.0
    stepsize: 2.0
    default: 1.0
  V: # minimal variance that must be covered for a split
    type: double
    min: 0.001
    max: 0.101
    stepsize: 0.05
    default: 0.001
  N: # number of folds that are used for backfitting
    type: integer
    min: 0
    max: 3
    stepsize: 1
    default: 0 
# check KValue (number of randomly selected instances), kinda difficult
---

name: WEKA_REPTREE
type: classification
framework: weka
package: weka.classifiers.trees
class: REPTree
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  I: # initial count of class values
    type: double
    min: 0.0
    max: 2.0
    stepsize: 1.0
    default: 0.0
  L: # maximum depth of the tree (-1 = no restriction)
    type: integer
    min: -1
    max: 11
    stepsize: 3
    default: -1
  M: # minimal number of instances in a leaf
    type: integer
    min: 1
    max: 11
    stepsize: 5
    default: 2
  V: # minimal variance that must be covered for a split
    type: double
    min: 0.001
    max: 0.101
    stepsize: 0.05
    default: 0.001
  P: # if enabled no pruning is performed
    type: flag
    default: disabled
  N: # number of cross valdiations used for pruning
    type: integer
    min: 1
    max: 5
    stepsize: 3
    default: 3
  R: # spread initial counts across all values
    type: flag
    default: disabled
---

# Rule-based classifiers from the package weka.classifiers.rules

name: WEKA_DECISIONTABLE
type: classification
framework: weka
package: weka.classifiers.rules
class: DecisionTable
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  X: # number of cross validation folds (1=leave one out)
    type: integer
    min: 1
    max: 5
    stepsize: 2
    default: 1
  E: # evaluation measure used to evaluate performance of attributes
    type: values
    values: [acc, rmse, mae, auc]
  I: # use IBk instead of majority for class
    type: flag
    default: disabled
  S: # search strategy for attributes
    type: values
    values: ["weka.attributeSelection.BestFirst -D 1 -N 5", "weka.attributeSelection.GreedyStepwise -T -1.7976931348623157E308 -N -1 -num-slots 1", "weka.attributeSelection.Ranker -T -1.7976931348623157E308 -N -1"]
    default: "weka.attributeSelection.BestFirst -D 1 -N 5"
---

name: WEKA_RIPPER
type: classification
framework: weka
package: weka.classifiers.rules
class: JRip
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  E: # whether a check for the error rate is ignored
    type: flag
    default: disabled
  F: # folds used for pruning
    type: integer
    min: 1
    max: 5
    stepsize: 2
    default: 3
  N: # minimal weight instances in a rule must have (default weight of an instance is 1.0)
    type: double
    min: 1.0
    max: 10.0
    stepsize: 3
    default: 2.0
  O: # number of optimization runs
    type: integer
    min: 1
    max: 5
    stepsize: 2
    default: 2
  P: # pruning disabled (i.e., pruning is disblaed if this flag is enabled)
    type: flag
    default: disabled
---

name: WEKA_ONER
type: classification
framework: weka
package: weka.classifiers.rules
class: OneR
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  B: # bucket size for bins
    type: integer
    min: 2
    max: 10
    stepsize: 4
    default: 6
---

name: WEKA_ZEROR
type: classification
framework: weka
package: weka.classifiers.rules
class: ZeroR
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
---

# TODO for weka
#NBTree_Default_Weka weka.classifiers.trees.NBTree
#SimpleCart_Default_Weka weka.classifiers.trees.SimpleCart
#BFTree_Default_Weka weka.classifiers.trees.BFTree

#ConjunctiveRule_Default_Weka weka.classifiers.rules.ConjunctiveRule
#PART_Default_Weka weka.classifiers.rules.PART
#Ridor_Default_Weka weka.classifiers.rules.Ridor


#IBk_Default_Weka weka.classifiers.lazy.IBk
#KStar_Default_Weka weka.classifiers.lazy.KStar

#BayesNet_Default_Weka weka.classifiers.bayes.BayesNet
#NaiveBayes_Default_Weka weka.classifiers.bayes.NaiveBayes

#KernelLogisticRegression_Default_Weka weka.classifiers.functions.KernelLogisticRegression
#Logistic_Default_Weka weka.classifiers.functions.Logistic
#MLPClassifier_Default_Weka weka.classifiers.functions.MLPClassifier
#RBFNetwork_Default_Weka weka.classifiers.functions.RBFNetwork
#SimpleLogistic_Default_Weka weka.classifiers.functions.SimpleLogistic
#SVM_Poly_Weka weka.classifiers.functions.SMO
#SVM_RBF_Weka weka.classifiers.functions.SMO -K weka.classifiers.functions.supportVector.RBFKernel
#SPegasus_Default_Weka weka.classifiers.functions.SPegasos
#VotedPerceptron_Default_Weka weka.classifiers.functions.VotedPerceptron

#HyperPipes_Default_Weka weka.classifiers.misc.HyperPipes
#VFI_Default_Weka weka.classifiers.misc.VFI

# Examples for sklearn and Spark. Due to rewrite currently not yet fully supported again. 

#---
#name: SKLEARN_DT
#framework: sklearn
#type: classification
#package:  sklearn.tree
#class: DecisionTreeClassifier
#features: float
#parameters:
#  min_samples_split:
#    type: integer
#    min: 2
#    max: 10
#    default: 2
#  max_depth:
#    type: integer
#    min: 1
#    max: 10
#    default: None
#properties:
#  same: score_exact
#  scramble: score_exact
#  opposite: score_exact
#---
#name: SPARK_DT
#framework: spark
#type: classification
#package:  org.apache.spark.ml.classification
#class: DecisionTreeClassifier
#features: float
#parameters:
#  setMaxDepth:
#    type: integer
#    min: 1
#    max: 10
#    default: 5
#  setMinInfoGain:
#    type: double
#    min: 0.0
#    max: 1.0
#    default: 0.1
#properties:
#  same: score_exact
#  scramble: score_exact
#  opposite: score_exact