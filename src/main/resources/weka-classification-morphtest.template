    @Test(timeout=21600000)
    public void test_<<<NAME>>>_<<<DATASET>>>() throws Exception {
        for(int iter=1; iter<=<<<ITERATIONS>>>; iter++) {
            Instances data = loadData("/morphdata/<<<DATASET>>>_" + iter + ".arff");
            Instances morphedData = loadData("/morphdata/<<<DATASET>>>_" + iter + "_<<<NAME>>>.arff");

            Classifier classifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", parameters);
		    classifier.buildClassifier(data);
            Classifier morphedClassifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", parameters);
            morphedClassifier.buildClassifier(morphedData);
            
            int deviations = 0;
            long[] expectedMorphCounts = new long[2];
            double[] expectedMorphDistributions = new double[data.size()];
            long[] morphedCounts = new long[2] ;
            double[] morphedDistributions = new double[data.size()];
            for (int i = 0; i < data.size(); i++) {
                double originalClass = classifier.classifyInstance(data.instance(i));
                double expectedMorphedClass;
			    <<<EXPECTEDMORPHEDCLASS>>>
                expectedMorphCounts[(int) expectedMorphedClass]++;
                expectedMorphDistributions[i] = classifier.distributionForInstance(data.instance(i))[(int) expectedMorphedClass]; 
                double morphedClass = morphedClassifier.classifyInstance(data.instance(i));
			    morphedCounts[(int) morphedClass]++;
			    morphedDistributions[i] = classifier.distributionForInstance(data.instance(i))[(int) morphedClass]; 
			    
                if (!(Double.compare(expectedMorphedClass, morphedClass) == 0)) {
                    deviations++;
                }
            }
            if( deviations>0 ) {
                assertMorphTest(<<<EVALUATIONTYPE>>>, deviations, data.size(), expectedMorphCounts, morphedCounts, expectedMorphDistributions, morphedDistributions);
            }
        }
    }

