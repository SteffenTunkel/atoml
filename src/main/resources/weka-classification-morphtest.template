    @Test(timeout=21600000)
    public void test_<<<NAME>>>_<<<DATASET>>>() throws Exception {
        for(int iter=1; iter<=<<<ITERATIONS>>>; iter++) {
            Instances data;
            InputStreamReader originalFile = new InputStreamReader(
                     this.getClass().getResourceAsStream("/morphdata/<<<DATASET>>>_" + iter + ".arff"));
            try(BufferedReader reader = new BufferedReader(originalFile);) {
                data = new Instances(reader);
                reader.close();
            }
            catch (IOException e) {
                throw new RuntimeException("error reading file:  morphdata/<<<DATASET>>>_" + iter + ".arff", e);
            }
            data.setClassIndex(data.numAttributes()-1);
            Instances morphedData;
            InputStreamReader morphedFile = new InputStreamReader(
                     this.getClass().getResourceAsStream("/morphdata/<<<DATASET>>>_" + iter + "_<<<NAME>>>.arff"));
            try(BufferedReader reader = new BufferedReader(morphedFile);) {
                morphedData = new Instances(reader);
                reader.close();
            }
            catch (IOException e) {
                throw new RuntimeException("error reading file:  morphdata/<<<DATASET>>>_" + iter + "_<<<NAME>>>.arff", e);
            }
            morphedData.setClassIndex(morphedData.numAttributes()-1);
            
            Classifier classifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", new String[]<<<PARAMETERS>>>);
		    classifier.buildClassifier(data);
            Classifier morphedClassifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", new String[]<<<PARAMETERS>>>);
            morphedClassifier.buildClassifier(morphedData);
            
            int deviations = 0;
            long[] expectedMorphCounts = new long[2];
            double[] expectedMorphDistributions = new double[data.size()];
            long[] morphedCounts = new long[2] ;
            double[] morphedDistributions = new double[data.size()];
            for (int i = 0; i < data.size(); i++) {
                double originalClass = classifier.classifyInstance(data.instance(i));
                double expectedMorphedClass;
			    <<<EXPECTEDMORPHEDCLASS>>>
                expectedMorphCounts[(int) expectedMorphedClass]++;
                expectedMorphDistributions[i] = classifier.distributionForInstance(data.instance(i))[(int) expectedMorphedClass]; 
                double morphedClass = morphedClassifier.classifyInstance(data.instance(i));
			    morphedCounts[(int) morphedClass]++;
			    morphedDistributions[i] = classifier.distributionForInstance(data.instance(i))[(int) morphedClass]; 
			    
                if (!(Double.compare(expectedMorphedClass, morphedClass) == 0)) {
                    deviations++;
                }
            }
            if( deviations>0 ) {
	            double pValueCounts = TestUtils.chiSquareTestDataSetsComparison(expectedMorphCounts, morphedCounts);
	            String message = String.format("results significantly different, p-value = %f (deviations: %d out of %d)", pValueCounts, deviations, data.size());
                System.out.println(String.format("p-value = %f (deviations: %d out of %d)", pValueCounts, deviations, data.size()));
                assertTrue(message, pValueCounts>0.05);
            }
        }
    }

