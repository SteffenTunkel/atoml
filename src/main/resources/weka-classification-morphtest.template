    @Test(timeout=21600000)
    public void test_<<<NAME>>>_<<<DATASET>>>() throws Exception {
        for(int iter=1; iter<=<<<ITERATIONS>>>; iter++) {
            Instances data;
            InputStreamReader originalFile = new InputStreamReader(
                     this.getClass().getResourceAsStream("/morphdata/<<<DATASET>>>_" + iter + ".arff"));
            try(BufferedReader reader = new BufferedReader(originalFile);) {
                data = new Instances(reader);
                reader.close();
            }
            catch (IOException e) {
                throw new RuntimeException("error reading file:  morphdata/<<<DATASET>>>_" + iter + ".arff", e);
            }
            data.setClassIndex(data.numAttributes()-1);
            Instances morphedData;
            InputStreamReader morphedFile = new InputStreamReader(
                     this.getClass().getResourceAsStream("/morphdata/<<<DATASET>>>_" + iter + "_<<<NAME>>>.arff"));
            try(BufferedReader reader = new BufferedReader(morphedFile);) {
                morphedData = new Instances(reader);
                reader.close();
            }
            catch (IOException e) {
                throw new RuntimeException("error reading file:  morphdata/<<<DATASET>>>_" + iter + "_<<<NAME>>>.arff", e);
            }
            morphedData.setClassIndex(morphedData.numAttributes()-1);
            Classifier classifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", new String[]<<<PARAMETERS>>>);
		    classifier.buildClassifier(data);
            Classifier morphedClassifier = AbstractClassifier.forName("<<<CLASSIFIER>>>", new String[]<<<PARAMETERS>>>);
            morphedClassifier.buildClassifier(morphedData);
            int deviations = 0;
            double[] originalClasses = new double[data.size()];
            double[] morphedClasses = new double[data.size()];
            for (int i = 0; i < data.size(); i++) {
                double originalClass = classifier.classifyInstance(data.instance(i));
			    double morphedClass = morphedClassifier.classifyInstance(data.instance(i));

                if (!(Double.compare(originalClass, morphedClass) == 0)) {
                    deviations++;
                }
                originalClasses[i] = originalClass;
                morphedClasses[i] = morphedClass;
            }
            Mean mean = new Mean();
            StandardDeviation sd = new StandardDeviation();
            KolmogorovSmirnovTest ksTest = new KolmogorovSmirnovTest();
            double meanOriginal = mean.evaluate(originalClasses);
            double meanMorphed = mean.evaluate(morphedClasses);
            double sdOriginal = sd.evaluate(originalClasses);
            double sdMorphed = sd.evaluate(morphedClasses);
            double pValue = ksTest.kolmogorovSmirnovTest(originalClasses, originalClasses);
            String message = String.format("results significantly different, p-value = %f (deviations: %d, original: mu=%f sd=%f, morphed: mu=%f sd=%f)", pValue, violations, meanOriginal, sdOriginal, meanMorphed, sdMorphed);
            
            assertTrue(message, pValue>0.5);
        }
    }

