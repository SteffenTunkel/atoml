package <<<PACKAGENAME>>>;

import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.FixMethodOrder;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;


import javax.annotation.Generated;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import org.apache.commons.math3.stat.inference.TestUtils;
import weka.classifiers.Classifier;
import weka.classifiers.AbstractClassifier;
import weka.core.Instances;
import weka.core.Instance;

/**
 * Automatically generated smoke and metamorphic tests.
 */
@Generated("atoml.testgen.TestclassGenerator")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@RunWith(Parameterized.class)
public class <<<CLASSNAME>>> {

    @Parameters(name = "{1}")
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
<<<HYPERPARAMETERS>>>
           });
    }
    
    @Parameter
    public String[] parameters;
    
    @Parameter(1)
    public String parameterName;

    private void assertMorphTest(String evaluationType, int deviations, int testsize, long[] expectedMorphCounts, long[] morphedCounts, double[] expectedMorphedDistributions, double[] morphedDistributions) {
        if( "exact".equalsIgnoreCase(evaluationType) ) {
            fail(String.format("results different (deviations: %d out of %d)", deviations, testsize));
        }
        else if( "classification".equalsIgnoreCase(evaluationType) ) {
            double pValueCounts = TestUtils.chiSquareTestDataSetsComparison(expectedMorphCounts, morphedCounts);
            String message = String.format("results significantly different, p-value = %f (deviations: %d out of %d)", pValueCounts, deviations, testsize);
            System.out.println(String.format("p-value = %f (deviations: %d out of %d)", pValueCounts, deviations, testsize));
            assertTrue(message, pValueCounts>0.05);
        } 
        else if( "score".equalsIgnoreCase(evaluationType) ) {
            double pValueKS = TestUtils.kolmogorovSmirnovTest(expectedMorphedDistributions, morphedDistributions);
            String message = String.format("score distributions significantly different, p-value = %f (deviations: %d out of %d)", pValueKS, deviations, testsize);
            System.out.println(String.format("p-value = %f (deviations: %d out of %d)", pValueKS, deviations, testsize));
            assertTrue(message, pValueKS>0.05);
        } else {
            throw new RuntimeException("invalid evaluation type for morph test: " + evaluationType + " (allowed: exact, classification, score)");
        }
    }
    
    private Instances loadData(String resourceName) {
        Instances data;
        InputStreamReader originalFile = new InputStreamReader(
                 this.getClass().getResourceAsStream(resourceName));
        try(BufferedReader reader = new BufferedReader(originalFile);) {
            data = new Instances(reader);
            reader.close();
        }
        catch (IOException e) {
            throw new RuntimeException(resourceName, e);
        }
        data.setClassIndex(data.numAttributes()-1);
        return data;
    }

<<<METHODS>>>
}